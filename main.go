package main

import (
	"database/sql"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"

	"github.com/UD94/SecondOP/Common"
	"github.com/UD94/SecondOP/Function"
	"github.com/go-ini/ini"
)

var channel_password string
var DB sql.DB

type AutoGenerated struct {
	Password   string   `json:"Password"`
	Doldfile   bool     `json:"Doldfile"`
	Action     string   `json:"Action"`
	Domain     string   `json:"Domain"`
	Configtype string   `json:"Configtype"`
	Content    []string `json:"Content"`
}

func HandlePostJson(w http.ResponseWriter, r *http.Request) {
	// 根据请求body创建一个json解析器实例
	var get_result AutoGenerated
	data, err := ioutil.ReadAll(r.Body)

	json.Unmarshal(data, &get_result)
	if err != nil {
		return
	}

	DB = Common.InitDB()

	if get_result.Password != channel_password {
		fmt.Fprintf(w, `{"code":5}`)
	} else {
		switch get_result.Action {
		case "dnsresolvr":
			go Function.Dns_thread(get_result.Domain)

			go Function.Google_domain(get_result.Domain)
			fmt.Fprintf(w, `{"code":0}`)
		case "config":
			Config_Workstation(get_result.Configtype, get_result.Content, get_result.Doldfile)
			fmt.Fprintf(w, `{"code":0}`)
		case "md5":
			result := Function.Md5_query(get_result.Content[0], DB)
			fmt.Fprintf(w, `{"code:0","Password":"`+result.Password+`"}`)
		case "saveproject":
			Function.Save(DB)
		case "readproject":
			Function.Read(DB)
		default:
			files, err := ioutil.ReadDir(`Cache`)
			if err != nil {
				panic(err)
			}
			if len(files) != 0 {
				file, _ := os.Open("Cache\\" + files[0].Name())
				defer Common.DeleteFile("Cache\\" + files[0].Name())
				defer file.Close()

				fileHeader := make([]byte, 512)
				file.Read(fileHeader)

				fileStat, _ := file.Stat()

				w.Header().Set("Content-Disposition", "attachment; filename="+files[0].Name())
				w.Header().Set("Content-Type", http.DetectContentType(fileHeader))
				w.Header().Set("Content-Length", strconv.FormatInt(fileStat.Size(), 10))

				file.Seek(0, 0)
				io.Copy(w, file)
				fmt.Fprintf(w, `{"code":10}`)
			}

		}
	}

}

func Config_Workstation(configtype string, content []string, Doldfile bool) {
	cfg, err := ini.Load("config.ini")
	if err != nil {
		fmt.Printf("Load config error")
	}
	switch configtype {
	case "dnsdomainconfig":
		if Doldfile {
			Common.DeleteFile("domain.txt")
		}
		for _, s := range content {
			Common.Write_result(s+"\n", "domain.txt")
		}
	case "md5config":
		Function.MD5_insert(content[0], content[1], DB)
	case "mysqlconfig":
		cfg.Section("mysql").Key("ip").SetValue(content[0])
		cfg.Section("mysql").Key("port").SetValue(content[1])
		cfg.Section("mysql").Key("user").SetValue(content[2])
		cfg.Section("mysql").Key("password").SetValue(content[3])
		cfg.Section("mysql").Key("database").SetValue(content[4])
	case "communicationconfig":
		channel_password = content[0]
	default:
		return
	}
}

func Starthttps(ip string) {
	http.HandleFunc("/post", HandlePostJson)
	err := http.ListenAndServeTLS(ip+":4321", "server.crt", "server.key", nil)
	if err != nil {
		log.Fatal("listen error:", err.Error())
	}
}

func main() {
	var ip string
	flag.StringVar(&channel_password, "p", "ud94iscreater", "连接密码，默认为ud94iscreater")
	flag.StringVar(&ip, "i", "0.0.0.0", "监听ip，默认为0.0.0.0")
	flag.Parse()

	Starthttps(ip)
}
