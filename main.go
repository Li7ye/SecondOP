package main

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"

	"fyne.io/fyne/app"
	"fyne.io/fyne/layout"
	"fyne.io/fyne/widget"
	"github.com/UD94/SecondOP/Common"
	"github.com/UD94/SecondOP/Function"
)

var channel_password string

type AutoGenerated struct {
	Password   string   `json:"Password"`
	Doldfile   bool     `json:"Doldfile"`
	Action     string   `json:"Action"`
	Domain     string   `json:"Domain"`
	Configtype string   `json:"Configtype"`
	Content    []string `json:"Content"`
}

func HandlePostJson(w http.ResponseWriter, r *http.Request) {
	// 根据请求body创建一个json解析器实例
	var get_result AutoGenerated
	data, err := ioutil.ReadAll(r.Body)

	json.Unmarshal(data, &get_result)
	if err != nil {
		return
	}

	if get_result.Password != channel_password {
		fmt.Fprintf(w, `{"code":5}`)
	} else {
		switch get_result.Action {
		case "dnsresolvr":
			go Function.Dns_thread(get_result.Domain)

			go Function.Google_domain(get_result.Domain)
			fmt.Fprintf(w, `{"code":0}`)
		case "config":
			Config_Workstation(get_result.Configtype, get_result.Content, get_result.Doldfile)
			fmt.Fprintf(w, `{"code":0}`)
		default:
			files, err := ioutil.ReadDir(`Cache`)
			if err != nil {
				panic(err)
			}
			if len(files) != 0 {
				file, _ := os.Open("Cache\\" + files[0].Name())
				defer Common.DeleteFile("Cache\\" + files[0].Name())
				defer file.Close()

				fileHeader := make([]byte, 512)
				file.Read(fileHeader)

				fileStat, _ := file.Stat()

				w.Header().Set("Content-Disposition", "attachment; filename="+files[0].Name())
				w.Header().Set("Content-Type", http.DetectContentType(fileHeader))
				w.Header().Set("Content-Length", strconv.FormatInt(fileStat.Size(), 10))

				file.Seek(0, 0)
				io.Copy(w, file)
				fmt.Fprintf(w, `{"code":10}`)
			}

		}
	}

}

func Config_Workstation(configtype string, content []string, Doldfile bool) {
	switch configtype {
	case "dnsdomainconfig":
		if Doldfile {
			Common.DeleteFile("domain.txt")
		}
		for _, s := range content {
			Common.Write_result(s+"\n", "domain.txt")
		}

	default:
		return
	}
}

func Starthttps() {
	http.HandleFunc("/post", HandlePostJson)
	err := http.ListenAndServeTLS(":4321", "server.crt", "server.key", nil)
	if err != nil {
		log.Fatal("listen error:", err.Error())
	}
}

/*
func main() {

	channel_password = "ud94iscreater"

	Starthttps()
}


func main() {
	// new app
	a := app.New()
	// new window
	w := a.NewWindow("Hacker Station")
	// resize window
	w.Resize(fyne.NewSize(400, 400))
	// Menu Items
	menuItem1 := fyne.NewMenuItem("Login", func() { fmt.Println("New pressed") })
	menuItem2 := fyne.NewMenuItem("Save", func() { fmt.Println("Save pressed") })
	menuItem3 := fyne.NewMenuItem("edit", nil)
	// New Menu
	newMenu := fyne.NewMenu("File", menuItem1, menuItem2, menuItem3)
	// creating new main menu
	menu := fyne.NewMainMenu(newMenu)
	// setting new menu
	w.SetMainMenu(menu)
	w.ShowAndRun()
}
*/
func main() {
	myApp := app.New()
	myWin := myApp.NewWindow("Entry")

	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("input name")
	nameEntry.OnChanged = func(content string) {
		fmt.Println("name:", nameEntry.Text, "entered")
	}

	passEntry := widget.NewPasswordEntry()
	passEntry.SetPlaceHolder("input password")

	nameBox := widget.NewHBox(widget.NewLabel("Name"), layout.NewSpacer(), nameEntry)
	passwordBox := widget.NewHBox(widget.NewLabel("Password"), layout.NewSpacer(), passEntry)

	loginBtn := widget.NewButton("Login", func() {
		fmt.Println("name:", nameEntry.Text, "password:", passEntry.Text, "login in")
	})

	multiEntry := widget.NewEntry()
	multiEntry.SetPlaceHolder("please enter\nyour description")
	multiEntry.MultiLine = true

	content := widget.NewVBox(nameBox, passwordBox, loginBtn, multiEntry)
	myWin.SetContent(content)
	myWin.ShowAndRun()
}
